// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package image

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage(in *jlexer.Lexer, out *UpdateImageInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "object":
			if in.IsNull() {
				in.Skip()
				out.ObjectID = nil
			} else {
				if out.ObjectID == nil {
					out.ObjectID = new(string)
				}
				*out.ObjectID = string(in.String())
			}
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(string)
				}
				*out.Origin = string(in.String())
			}
		case "middle":
			if in.IsNull() {
				in.Skip()
				out.Middle = nil
			} else {
				if out.Middle == nil {
					out.Middle = new(string)
				}
				*out.Middle = string(in.String())
			}
		case "small":
			if in.IsNull() {
				in.Skip()
				out.Small = nil
			} else {
				if out.Small == nil {
					out.Small = new(string)
				}
				*out.Small = string(in.String())
			}
		case "organization":
			if in.IsNull() {
				in.Skip()
				out.OrganizationID = nil
			} else {
				if out.OrganizationID == nil {
					out.OrganizationID = new(string)
				}
				*out.OrganizationID = string(in.String())
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.ObjectType = nil
			} else {
				if out.ObjectType == nil {
					out.ObjectType = new(int)
				}
				*out.ObjectType = int(in.Int())
			}
		case "main":
			if in.IsNull() {
				in.Skip()
				out.IsMain = nil
			} else {
				if out.IsMain == nil {
					out.IsMain = new(bool)
				}
				*out.IsMain = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage(out *jwriter.Writer, in UpdateImageInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix)
		if in.ObjectID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ObjectID))
		}
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		if in.Origin == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Origin))
		}
	}
	{
		const prefix string = ",\"middle\":"
		out.RawString(prefix)
		if in.Middle == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Middle))
		}
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		if in.Small == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Small))
		}
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		if in.OrganizationID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OrganizationID))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.ObjectType == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.ObjectType))
		}
	}
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix)
		if in.IsMain == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.IsMain))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateImageInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateImageInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateImageInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateImageInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage1(in *jlexer.Lexer, out *ListImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListImage, 0, 0)
			} else {
				*out = ListImage{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Image
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage1(out *jwriter.Writer, in ListImage) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage1(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage2(in *jlexer.Lexer, out *Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "object":
			out.ObjectID = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "middle":
			out.Middle = string(in.String())
		case "small":
			out.Small = string(in.String())
		case "organization":
			out.OrganizationID = string(in.String())
		case "type":
			out.ObjectType = int(in.Int())
		case "main":
			out.IsMain = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage2(out *jwriter.Writer, in Image) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix)
		out.String(string(in.ObjectID))
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"middle\":"
		out.RawString(prefix)
		out.String(string(in.Middle))
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		out.String(string(in.Small))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectType))
	}
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Image) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Image) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Image) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Image) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage2(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage3(in *jlexer.Lexer, out *CreateImageInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "object":
			out.ObjectID = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "middle":
			out.Middle = string(in.String())
		case "small":
			out.Small = string(in.String())
		case "organization":
			out.OrganizationID = string(in.String())
		case "type":
			out.ObjectType = int(in.Int())
		case "main":
			out.IsMain = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage3(out *jwriter.Writer, in CreateImageInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix[1:])
		out.String(string(in.ObjectID))
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"middle\":"
		out.RawString(prefix)
		out.String(string(in.Middle))
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		out.String(string(in.Small))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectType))
	}
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMain))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateImageInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateImageInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateImageInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateImageInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainImage3(l, v)
}
