// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package item

import (
	json "encoding/json"
	comment "github.com/evgeniy-dammer/emenu-api/internal/domain/comment"
	image "github.com/evgeniy-dammer/emenu-api/internal/domain/image"
	specification "github.com/evgeniy-dammer/emenu-api/internal/domain/specification"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem(in *jlexer.Lexer, out *UpdateItemInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "nametm":
			if in.IsNull() {
				in.Skip()
				out.NameTm = nil
			} else {
				if out.NameTm == nil {
					out.NameTm = new(string)
				}
				*out.NameTm = string(in.String())
			}
		case "nameru":
			if in.IsNull() {
				in.Skip()
				out.NameRu = nil
			} else {
				if out.NameRu == nil {
					out.NameRu = new(string)
				}
				*out.NameRu = string(in.String())
			}
		case "nametr":
			if in.IsNull() {
				in.Skip()
				out.NameTr = nil
			} else {
				if out.NameTr == nil {
					out.NameTr = new(string)
				}
				*out.NameTr = string(in.String())
			}
		case "nameen":
			if in.IsNull() {
				in.Skip()
				out.NameEn = nil
			} else {
				if out.NameEn == nil {
					out.NameEn = new(string)
				}
				*out.NameEn = string(in.String())
			}
		case "descriptiontm":
			if in.IsNull() {
				in.Skip()
				out.DescriptionTm = nil
			} else {
				if out.DescriptionTm == nil {
					out.DescriptionTm = new(string)
				}
				*out.DescriptionTm = string(in.String())
			}
		case "descriptionru":
			if in.IsNull() {
				in.Skip()
				out.DescriptionRu = nil
			} else {
				if out.DescriptionRu == nil {
					out.DescriptionRu = new(string)
				}
				*out.DescriptionRu = string(in.String())
			}
		case "descriptiontr":
			if in.IsNull() {
				in.Skip()
				out.DescriptionTr = nil
			} else {
				if out.DescriptionTr == nil {
					out.DescriptionTr = new(string)
				}
				*out.DescriptionTr = string(in.String())
			}
		case "descriptionen":
			if in.IsNull() {
				in.Skip()
				out.DescriptionEn = nil
			} else {
				if out.DescriptionEn == nil {
					out.DescriptionEn = new(string)
				}
				*out.DescriptionEn = string(in.String())
			}
		case "internal":
			if in.IsNull() {
				in.Skip()
				out.InternalID = nil
			} else {
				if out.InternalID == nil {
					out.InternalID = new(string)
				}
				*out.InternalID = string(in.String())
			}
		case "category":
			if in.IsNull() {
				in.Skip()
				out.CategoryID = nil
			} else {
				if out.CategoryID == nil {
					out.CategoryID = new(string)
				}
				*out.CategoryID = string(in.String())
			}
		case "organisation":
			if in.IsNull() {
				in.Skip()
				out.OrganizationID = nil
			} else {
				if out.OrganizationID == nil {
					out.OrganizationID = new(string)
				}
				*out.OrganizationID = string(in.String())
			}
		case "brand":
			if in.IsNull() {
				in.Skip()
				out.BrandID = nil
			} else {
				if out.BrandID == nil {
					out.BrandID = new(int)
				}
				*out.BrandID = int(in.Int())
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(float32)
				}
				*out.Price = float32(in.Float32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem(out *jwriter.Writer, in UpdateItemInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	{
		const prefix string = ",\"nametm\":"
		out.RawString(prefix)
		if in.NameTm == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NameTm))
		}
	}
	{
		const prefix string = ",\"nameru\":"
		out.RawString(prefix)
		if in.NameRu == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NameRu))
		}
	}
	{
		const prefix string = ",\"nametr\":"
		out.RawString(prefix)
		if in.NameTr == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NameTr))
		}
	}
	{
		const prefix string = ",\"nameen\":"
		out.RawString(prefix)
		if in.NameEn == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.NameEn))
		}
	}
	{
		const prefix string = ",\"descriptiontm\":"
		out.RawString(prefix)
		if in.DescriptionTm == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DescriptionTm))
		}
	}
	{
		const prefix string = ",\"descriptionru\":"
		out.RawString(prefix)
		if in.DescriptionRu == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DescriptionRu))
		}
	}
	{
		const prefix string = ",\"descriptiontr\":"
		out.RawString(prefix)
		if in.DescriptionTr == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DescriptionTr))
		}
	}
	{
		const prefix string = ",\"descriptionen\":"
		out.RawString(prefix)
		if in.DescriptionEn == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.DescriptionEn))
		}
	}
	{
		const prefix string = ",\"internal\":"
		out.RawString(prefix)
		if in.InternalID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InternalID))
		}
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		if in.CategoryID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CategoryID))
		}
	}
	{
		const prefix string = ",\"organisation\":"
		out.RawString(prefix)
		if in.OrganizationID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OrganizationID))
		}
	}
	{
		const prefix string = ",\"brand\":"
		out.RawString(prefix)
		if in.BrandID == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.BrandID))
		}
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		if in.Price == nil {
			out.RawString("null")
		} else {
			out.Float32(float32(*in.Price))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateItemInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateItemInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateItemInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateItemInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem1(in *jlexer.Lexer, out *ListItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListItem, 0, 0)
			} else {
				*out = ListItem{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Item
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem1(out *jwriter.Writer, in ListItem) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem1(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem2(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "descriptionen":
			out.DescriptionEn = string(in.String())
		case "descriptionru":
			out.DescriptionRu = string(in.String())
		case "nameru":
			out.NameRu = string(in.String())
		case "nametr":
			out.NameTr = string(in.String())
		case "created":
			out.CreatedAt = string(in.String())
		case "descriptiontm":
			out.DescriptionTm = string(in.String())
		case "nametm":
			out.NameTm = string(in.String())
		case "descriptiontr":
			out.DescriptionTr = string(in.String())
		case "nameen":
			out.NameEn = string(in.String())
		case "internal":
			out.InternalID = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "organization":
			out.OrganizationID = string(in.String())
		case "category":
			out.CategoryID = string(in.String())
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]image.Image, 0, 0)
					} else {
						out.Images = []image.Image{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v4 image.Image
					easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainImage(in, &v4)
					out.Images = append(out.Images, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]comment.Comment, 0, 0)
					} else {
						out.Comments = []comment.Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v5 comment.Comment
					easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainComment(in, &v5)
					out.Comments = append(out.Comments, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "specification":
			if in.IsNull() {
				in.Skip()
				out.Specification = nil
			} else {
				in.Delim('[')
				if out.Specification == nil {
					if !in.IsDelim(']') {
						out.Specification = make([]specification.Specification, 0, 0)
					} else {
						out.Specification = []specification.Specification{}
					}
				} else {
					out.Specification = (out.Specification)[:0]
				}
				for !in.IsDelim(']') {
					var v6 specification.Specification
					(v6).UnmarshalEasyJSON(in)
					out.Specification = append(out.Specification, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "brand":
			out.BrandID = int(in.Int())
		case "commentsqty":
			out.CommentsQty = int(in.Int())
		case "rating":
			out.Rating = float32(in.Float32())
		case "price":
			out.Price = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem2(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"descriptionen\":"
		out.RawString(prefix[1:])
		out.String(string(in.DescriptionEn))
	}
	{
		const prefix string = ",\"descriptionru\":"
		out.RawString(prefix)
		out.String(string(in.DescriptionRu))
	}
	{
		const prefix string = ",\"nameru\":"
		out.RawString(prefix)
		out.String(string(in.NameRu))
	}
	{
		const prefix string = ",\"nametr\":"
		out.RawString(prefix)
		out.String(string(in.NameTr))
	}
	if in.CreatedAt != "" {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"descriptiontm\":"
		out.RawString(prefix)
		out.String(string(in.DescriptionTm))
	}
	{
		const prefix string = ",\"nametm\":"
		out.RawString(prefix)
		out.String(string(in.NameTm))
	}
	{
		const prefix string = ",\"descriptiontr\":"
		out.RawString(prefix)
		out.String(string(in.DescriptionTr))
	}
	{
		const prefix string = ",\"nameen\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"internal\":"
		out.RawString(prefix)
		out.String(string(in.InternalID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.CategoryID))
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Images {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainImage(out, v8)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Comments {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainComment(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"specification\":"
		out.RawString(prefix)
		if in.Specification == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Specification {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"brand\":"
		out.RawString(prefix)
		out.Int(int(in.BrandID))
	}
	{
		const prefix string = ",\"commentsqty\":"
		out.RawString(prefix)
		out.Int(int(in.CommentsQty))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float32(float32(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem2(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainComment(in *jlexer.Lexer, out *comment.Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user":
			out.UserID = string(in.String())
		case "item":
			out.ItemID = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "organization":
			out.OrganizationID = string(in.String())
		case "created":
			out.CreatedAt = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "rating":
			out.Rating = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainComment(out *jwriter.Writer, in comment.Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		out.String(string(in.ItemID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	if in.CreatedAt != "" {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainImage(in *jlexer.Lexer, out *image.Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "object":
			out.ObjectID = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "middle":
			out.Middle = string(in.String())
		case "small":
			out.Small = string(in.String())
		case "organization":
			out.OrganizationID = string(in.String())
		case "type":
			out.ObjectType = int(in.Int())
		case "main":
			out.IsMain = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainImage(out *jwriter.Writer, in image.Image) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"object\":"
		out.RawString(prefix)
		out.String(string(in.ObjectID))
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"middle\":"
		out.RawString(prefix)
		out.String(string(in.Middle))
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		out.String(string(in.Small))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.ObjectType))
	}
	{
		const prefix string = ",\"main\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMain))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem3(in *jlexer.Lexer, out *CreateItemInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "descriptionen":
			out.DescriptionEn = string(in.String())
		case "descriptionru":
			out.DescriptionRu = string(in.String())
		case "nameru":
			out.NameRu = string(in.String())
		case "nametr":
			out.NameTr = string(in.String())
		case "descriptiontm":
			out.DescriptionTm = string(in.String())
		case "nametm":
			out.NameTm = string(in.String())
		case "descriptiontr":
			out.DescriptionTr = string(in.String())
		case "nameen":
			out.NameEn = string(in.String())
		case "internal":
			out.InternalID = string(in.String())
		case "organization":
			out.OrganizationID = string(in.String())
		case "category":
			out.CategoryID = string(in.String())
		case "brand":
			out.BrandID = int(in.Int())
		case "price":
			out.Price = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem3(out *jwriter.Writer, in CreateItemInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"descriptionen\":"
		out.RawString(prefix[1:])
		out.String(string(in.DescriptionEn))
	}
	{
		const prefix string = ",\"descriptionru\":"
		out.RawString(prefix)
		out.String(string(in.DescriptionRu))
	}
	{
		const prefix string = ",\"nameru\":"
		out.RawString(prefix)
		out.String(string(in.NameRu))
	}
	{
		const prefix string = ",\"nametr\":"
		out.RawString(prefix)
		out.String(string(in.NameTr))
	}
	{
		const prefix string = ",\"descriptiontm\":"
		out.RawString(prefix)
		out.String(string(in.DescriptionTm))
	}
	{
		const prefix string = ",\"nametm\":"
		out.RawString(prefix)
		out.String(string(in.NameTm))
	}
	{
		const prefix string = ",\"descriptiontr\":"
		out.RawString(prefix)
		out.String(string(in.DescriptionTr))
	}
	{
		const prefix string = ",\"nameen\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"internal\":"
		out.RawString(prefix)
		out.String(string(in.InternalID))
	}
	{
		const prefix string = ",\"organization\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationID))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.CategoryID))
	}
	{
		const prefix string = ",\"brand\":"
		out.RawString(prefix)
		out.Int(int(in.BrandID))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float32(float32(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateItemInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateItemInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammerEmenuApiInternalDomainItem3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateItemInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateItemInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammerEmenuApiInternalDomainItem3(l, v)
}
