// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rule

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule(in *jlexer.Lexer, out *UpdateRuleInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "ptype":
			if in.IsNull() {
				in.Skip()
				out.Ptype = nil
			} else {
				if out.Ptype == nil {
					out.Ptype = new(string)
				}
				*out.Ptype = string(in.String())
			}
		case "v0":
			if in.IsNull() {
				in.Skip()
				out.V0 = nil
			} else {
				if out.V0 == nil {
					out.V0 = new(string)
				}
				*out.V0 = string(in.String())
			}
		case "v1":
			if in.IsNull() {
				in.Skip()
				out.V1 = nil
			} else {
				if out.V1 == nil {
					out.V1 = new(string)
				}
				*out.V1 = string(in.String())
			}
		case "v2":
			if in.IsNull() {
				in.Skip()
				out.V2 = nil
			} else {
				if out.V2 == nil {
					out.V2 = new(string)
				}
				*out.V2 = string(in.String())
			}
		case "v3":
			if in.IsNull() {
				in.Skip()
				out.V3 = nil
			} else {
				if out.V3 == nil {
					out.V3 = new(string)
				}
				*out.V3 = string(in.String())
			}
		case "v4":
			if in.IsNull() {
				in.Skip()
				out.V4 = nil
			} else {
				if out.V4 == nil {
					out.V4 = new(string)
				}
				*out.V4 = string(in.String())
			}
		case "v5":
			if in.IsNull() {
				in.Skip()
				out.V5 = nil
			} else {
				if out.V5 == nil {
					out.V5 = new(string)
				}
				*out.V5 = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule(out *jwriter.Writer, in UpdateRuleInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		if in.ID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ID))
		}
	}
	{
		const prefix string = ",\"ptype\":"
		out.RawString(prefix)
		if in.Ptype == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Ptype))
		}
	}
	{
		const prefix string = ",\"v0\":"
		out.RawString(prefix)
		if in.V0 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.V0))
		}
	}
	{
		const prefix string = ",\"v1\":"
		out.RawString(prefix)
		if in.V1 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.V1))
		}
	}
	{
		const prefix string = ",\"v2\":"
		out.RawString(prefix)
		if in.V2 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.V2))
		}
	}
	{
		const prefix string = ",\"v3\":"
		out.RawString(prefix)
		if in.V3 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.V3))
		}
	}
	{
		const prefix string = ",\"v4\":"
		out.RawString(prefix)
		if in.V4 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.V4))
		}
	}
	{
		const prefix string = ",\"v5\":"
		out.RawString(prefix)
		if in.V5 == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.V5))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateRuleInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateRuleInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateRuleInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateRuleInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule1(in *jlexer.Lexer, out *Rule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "ptype":
			out.Ptype = string(in.String())
		case "v0":
			out.V0 = string(in.String())
		case "v1":
			out.V1 = string(in.String())
		case "v2":
			out.V2 = string(in.String())
		case "v3":
			out.V3 = string(in.String())
		case "v4":
			out.V4 = string(in.String())
		case "v5":
			out.V5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule1(out *jwriter.Writer, in Rule) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"ptype\":"
		out.RawString(prefix)
		out.String(string(in.Ptype))
	}
	{
		const prefix string = ",\"v0\":"
		out.RawString(prefix)
		out.String(string(in.V0))
	}
	{
		const prefix string = ",\"v1\":"
		out.RawString(prefix)
		out.String(string(in.V1))
	}
	{
		const prefix string = ",\"v2\":"
		out.RawString(prefix)
		out.String(string(in.V2))
	}
	{
		const prefix string = ",\"v3\":"
		out.RawString(prefix)
		out.String(string(in.V3))
	}
	{
		const prefix string = ",\"v4\":"
		out.RawString(prefix)
		out.String(string(in.V4))
	}
	{
		const prefix string = ",\"v5\":"
		out.RawString(prefix)
		out.String(string(in.V5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule1(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule2(in *jlexer.Lexer, out *ListRule) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListRule, 0, 0)
			} else {
				*out = ListRule{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Rule
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule2(out *jwriter.Writer, in ListRule) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListRule) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListRule) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListRule) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListRule) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule2(l, v)
}
func easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule3(in *jlexer.Lexer, out *CreateRuleInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ptype":
			out.Ptype = string(in.String())
		case "v0":
			out.V0 = string(in.String())
		case "v1":
			out.V1 = string(in.String())
		case "v2":
			out.V2 = string(in.String())
		case "v3":
			out.V3 = string(in.String())
		case "v4":
			out.V4 = string(in.String())
		case "v5":
			out.V5 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule3(out *jwriter.Writer, in CreateRuleInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ptype\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ptype))
	}
	{
		const prefix string = ",\"v0\":"
		out.RawString(prefix)
		out.String(string(in.V0))
	}
	{
		const prefix string = ",\"v1\":"
		out.RawString(prefix)
		out.String(string(in.V1))
	}
	{
		const prefix string = ",\"v2\":"
		out.RawString(prefix)
		out.String(string(in.V2))
	}
	{
		const prefix string = ",\"v3\":"
		out.RawString(prefix)
		out.String(string(in.V3))
	}
	{
		const prefix string = ",\"v4\":"
		out.RawString(prefix)
		out.String(string(in.V4))
	}
	{
		const prefix string = ",\"v5\":"
		out.RawString(prefix)
		out.String(string(in.V5))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateRuleInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateRuleInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateRuleInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateRuleInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComEvgeniyDammermarketplaceApiInternalDomainRule3(l, v)
}
