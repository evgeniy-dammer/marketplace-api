// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockStorage

import (
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"
	mock "github.com/stretchr/testify/mock"

	user "github.com/evgeniy-dammer/marketplace-api/internal/domain/user"
)

// Authentication is an autogenerated mock type for the Authentication type
type Authentication struct {
	mock.Mock
}

// AuthenticationCreateUser provides a mock function with given fields: ctx, input
func (_m *Authentication) AuthenticationCreateUser(ctx context.Context, input user.CreateUserInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.CreateUserInput) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.CreateUserInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.CreateUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticationGetUser provides a mock function with given fields: ctx, id, username
func (_m *Authentication) AuthenticationGetUser(ctx context.Context, id string, username string) (user.User, error) {
	ret := _m.Called(ctx, id, username)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (user.User, error)); ok {
		return rf(ctx, id, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) user.User); ok {
		r0 = rf(ctx, id, username)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthentication interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthentication creates a new instance of Authentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthentication(t mockConstructorTestingTNewAuthentication) *Authentication {
	mock := &Authentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
