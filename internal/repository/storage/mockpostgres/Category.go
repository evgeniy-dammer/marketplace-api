// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockStorage

import (
	category "github.com/evgeniy-dammer/marketplace-api/internal/domain/category"
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"
)

// Category is an autogenerated mock type for the Category type
type Category struct {
	mock.Mock
}

// CategoryCreate provides a mock function with given fields: ctx, meta, input
func (_m *Category) CategoryCreate(ctx context.Context, meta query.MetaData, input category.CreateCategoryInput) (string, error) {
	ret := _m.Called(ctx, meta, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, category.CreateCategoryInput) (string, error)); ok {
		return rf(ctx, meta, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, category.CreateCategoryInput) string); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, category.CreateCategoryInput) error); ok {
		r1 = rf(ctx, meta, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryDelete provides a mock function with given fields: ctx, meta, categoryID
func (_m *Category) CategoryDelete(ctx context.Context, meta query.MetaData, categoryID string) error {
	ret := _m.Called(ctx, meta, categoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) error); ok {
		r0 = rf(ctx, meta, categoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CategoryGetAll provides a mock function with given fields: ctx, meta, params
func (_m *Category) CategoryGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]category.Category, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]category.Category, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []category.Category); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]category.Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryGetOne provides a mock function with given fields: ctx, meta, categoryID
func (_m *Category) CategoryGetOne(ctx context.Context, meta query.MetaData, categoryID string) (category.Category, error) {
	ret := _m.Called(ctx, meta, categoryID)

	var r0 category.Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) (category.Category, error)); ok {
		return rf(ctx, meta, categoryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) category.Category); ok {
		r0 = rf(ctx, meta, categoryID)
	} else {
		r0 = ret.Get(0).(category.Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, string) error); ok {
		r1 = rf(ctx, meta, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryUpdate provides a mock function with given fields: ctx, meta, input
func (_m *Category) CategoryUpdate(ctx context.Context, meta query.MetaData, input category.UpdateCategoryInput) error {
	ret := _m.Called(ctx, meta, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, category.UpdateCategoryInput) error); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCategory interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategory creates a new instance of Category. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategory(t mockConstructorTestingTNewCategory) *Category {
	mock := &Category{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
