// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockStorage

import (
	item "github.com/evgeniy-dammer/marketplace-api/internal/domain/item"
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"
)

// Item is an autogenerated mock type for the Item type
type Item struct {
	mock.Mock
}

// ItemCreate provides a mock function with given fields: ctx, meta, input
func (_m *Item) ItemCreate(ctx context.Context, meta query.MetaData, input item.CreateItemInput) (string, error) {
	ret := _m.Called(ctx, meta, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, item.CreateItemInput) (string, error)); ok {
		return rf(ctx, meta, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, item.CreateItemInput) string); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, item.CreateItemInput) error); ok {
		r1 = rf(ctx, meta, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ItemDelete provides a mock function with given fields: ctx, meta, itemID
func (_m *Item) ItemDelete(ctx context.Context, meta query.MetaData, itemID string) error {
	ret := _m.Called(ctx, meta, itemID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) error); ok {
		r0 = rf(ctx, meta, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ItemGetAll provides a mock function with given fields: ctx, meta, params
func (_m *Item) ItemGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]item.Item, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []item.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]item.Item, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []item.Item); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]item.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ItemGetOne provides a mock function with given fields: ctx, meta, itemID
func (_m *Item) ItemGetOne(ctx context.Context, meta query.MetaData, itemID string) (item.Item, error) {
	ret := _m.Called(ctx, meta, itemID)

	var r0 item.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) (item.Item, error)); ok {
		return rf(ctx, meta, itemID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) item.Item); ok {
		r0 = rf(ctx, meta, itemID)
	} else {
		r0 = ret.Get(0).(item.Item)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, string) error); ok {
		r1 = rf(ctx, meta, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ItemUpdate provides a mock function with given fields: ctx, meta, input
func (_m *Item) ItemUpdate(ctx context.Context, meta query.MetaData, input item.UpdateItemInput) error {
	ret := _m.Called(ctx, meta, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, item.UpdateItemInput) error); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewItem interface {
	mock.TestingT
	Cleanup(func())
}

// NewItem creates a new instance of Item. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewItem(t mockConstructorTestingTNewItem) *Item {
	mock := &Item{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
