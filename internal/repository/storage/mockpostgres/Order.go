// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockStorage

import (
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"
	mock "github.com/stretchr/testify/mock"

	order "github.com/evgeniy-dammer/marketplace-api/internal/domain/order"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// OrderCreate provides a mock function with given fields: ctx, meta, input
func (_m *Order) OrderCreate(ctx context.Context, meta query.MetaData, input order.CreateOrderInput) (string, error) {
	ret := _m.Called(ctx, meta, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, order.CreateOrderInput) (string, error)); ok {
		return rf(ctx, meta, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, order.CreateOrderInput) string); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, order.CreateOrderInput) error); ok {
		r1 = rf(ctx, meta, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderDelete provides a mock function with given fields: ctx, meta, orderID
func (_m *Order) OrderDelete(ctx context.Context, meta query.MetaData, orderID string) error {
	ret := _m.Called(ctx, meta, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) error); ok {
		r0 = rf(ctx, meta, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderGetAll provides a mock function with given fields: ctx, meta, params
func (_m *Order) OrderGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]order.Order, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]order.Order, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []order.Order); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderGetOne provides a mock function with given fields: ctx, meta, orderID
func (_m *Order) OrderGetOne(ctx context.Context, meta query.MetaData, orderID string) (order.Order, error) {
	ret := _m.Called(ctx, meta, orderID)

	var r0 order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) (order.Order, error)); ok {
		return rf(ctx, meta, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) order.Order); ok {
		r0 = rf(ctx, meta, orderID)
	} else {
		r0 = ret.Get(0).(order.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, string) error); ok {
		r1 = rf(ctx, meta, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderUpdate provides a mock function with given fields: ctx, meta, input
func (_m *Order) OrderUpdate(ctx context.Context, meta query.MetaData, input order.UpdateOrderInput) error {
	ret := _m.Called(ctx, meta, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, order.UpdateOrderInput) error); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrder(t mockConstructorTestingTNewOrder) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
