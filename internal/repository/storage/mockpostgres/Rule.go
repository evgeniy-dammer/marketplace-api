// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockStorage

import (
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"
	mock "github.com/stretchr/testify/mock"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"

	rule "github.com/evgeniy-dammer/marketplace-api/internal/domain/rule"
)

// Rule is an autogenerated mock type for the Rule type
type Rule struct {
	mock.Mock
}

// RuleCreate provides a mock function with given fields: ctx, meta, input
func (_m *Rule) RuleCreate(ctx context.Context, meta query.MetaData, input rule.CreateRuleInput) (string, error) {
	ret := _m.Called(ctx, meta, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, rule.CreateRuleInput) (string, error)); ok {
		return rf(ctx, meta, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, rule.CreateRuleInput) string); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, rule.CreateRuleInput) error); ok {
		r1 = rf(ctx, meta, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleDelete provides a mock function with given fields: ctx, meta, ruleID
func (_m *Rule) RuleDelete(ctx context.Context, meta query.MetaData, ruleID string) error {
	ret := _m.Called(ctx, meta, ruleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) error); ok {
		r0 = rf(ctx, meta, ruleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RuleGetAll provides a mock function with given fields: ctx, meta, params
func (_m *Rule) RuleGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]rule.Rule, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []rule.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]rule.Rule, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []rule.Rule); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rule.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleGetOne provides a mock function with given fields: ctx, meta, ruleID
func (_m *Rule) RuleGetOne(ctx context.Context, meta query.MetaData, ruleID string) (rule.Rule, error) {
	ret := _m.Called(ctx, meta, ruleID)

	var r0 rule.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) (rule.Rule, error)); ok {
		return rf(ctx, meta, ruleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) rule.Rule); ok {
		r0 = rf(ctx, meta, ruleID)
	} else {
		r0 = ret.Get(0).(rule.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, string) error); ok {
		r1 = rf(ctx, meta, ruleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuleUpdate provides a mock function with given fields: ctx, meta, input
func (_m *Rule) RuleUpdate(ctx context.Context, meta query.MetaData, input rule.UpdateRuleInput) error {
	ret := _m.Called(ctx, meta, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, rule.UpdateRuleInput) error); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRule interface {
	mock.TestingT
	Cleanup(func())
}

// NewRule creates a new instance of Rule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRule(t mockConstructorTestingTNewRule) *Rule {
	mock := &Rule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
