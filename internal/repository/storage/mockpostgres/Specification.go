// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockStorage

import (
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"
	mock "github.com/stretchr/testify/mock"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"

	specification "github.com/evgeniy-dammer/marketplace-api/internal/domain/specification"
)

// Specification is an autogenerated mock type for the Specification type
type Specification struct {
	mock.Mock
}

// SpecificationCreate provides a mock function with given fields: ctx, meta, input
func (_m *Specification) SpecificationCreate(ctx context.Context, meta query.MetaData, input specification.CreateSpecificationInput) (string, error) {
	ret := _m.Called(ctx, meta, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, specification.CreateSpecificationInput) (string, error)); ok {
		return rf(ctx, meta, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, specification.CreateSpecificationInput) string); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, specification.CreateSpecificationInput) error); ok {
		r1 = rf(ctx, meta, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpecificationDelete provides a mock function with given fields: ctx, meta, specificationID
func (_m *Specification) SpecificationDelete(ctx context.Context, meta query.MetaData, specificationID string) error {
	ret := _m.Called(ctx, meta, specificationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) error); ok {
		r0 = rf(ctx, meta, specificationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpecificationGetAll provides a mock function with given fields: ctx, meta, params
func (_m *Specification) SpecificationGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]specification.Specification, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []specification.Specification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]specification.Specification, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []specification.Specification); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]specification.Specification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpecificationGetOne provides a mock function with given fields: ctx, meta, specificationID
func (_m *Specification) SpecificationGetOne(ctx context.Context, meta query.MetaData, specificationID string) (specification.Specification, error) {
	ret := _m.Called(ctx, meta, specificationID)

	var r0 specification.Specification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) (specification.Specification, error)); ok {
		return rf(ctx, meta, specificationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, string) specification.Specification); ok {
		r0 = rf(ctx, meta, specificationID)
	} else {
		r0 = ret.Get(0).(specification.Specification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, string) error); ok {
		r1 = rf(ctx, meta, specificationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SpecificationUpdate provides a mock function with given fields: ctx, meta, input
func (_m *Specification) SpecificationUpdate(ctx context.Context, meta query.MetaData, input specification.UpdateSpecificationInput) error {
	ret := _m.Called(ctx, meta, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, specification.UpdateSpecificationInput) error); ok {
		r0 = rf(ctx, meta, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSpecification interface {
	mock.TestingT
	Cleanup(func())
}

// NewSpecification creates a new instance of Specification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpecification(t mockConstructorTestingTNewSpecification) *Specification {
	mock := &Specification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
