// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockCache

import (
	image "github.com/evgeniy-dammer/marketplace-api/internal/domain/image"
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"
)

// Image is an autogenerated mock type for the Image type
type Image struct {
	mock.Mock
}

// ImageCreate provides a mock function with given fields: ctx, _a1
func (_m *Image) ImageCreate(ctx context.Context, _a1 image.Image) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, image.Image) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageDelete provides a mock function with given fields: ctx, imageID
func (_m *Image) ImageDelete(ctx context.Context, imageID string) error {
	ret := _m.Called(ctx, imageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, imageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageGetAll provides a mock function with given fields: ctx, meta, params
func (_m *Image) ImageGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]image.Image, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []image.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]image.Image, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []image.Image); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageGetOne provides a mock function with given fields: ctx, imageID
func (_m *Image) ImageGetOne(ctx context.Context, imageID string) (image.Image, error) {
	ret := _m.Called(ctx, imageID)

	var r0 image.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (image.Image, error)); ok {
		return rf(ctx, imageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) image.Image); ok {
		r0 = rf(ctx, imageID)
	} else {
		r0 = ret.Get(0).(image.Image)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImageInvalidate provides a mock function with given fields: ctx
func (_m *Image) ImageInvalidate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageSetAll provides a mock function with given fields: ctx, meta, params, images
func (_m *Image) ImageSetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter, images []image.Image) error {
	ret := _m.Called(ctx, meta, params, images)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter, []image.Image) error); ok {
		r0 = rf(ctx, meta, params, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ImageUpdate provides a mock function with given fields: ctx, _a1
func (_m *Image) ImageUpdate(ctx context.Context, _a1 image.Image) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, image.Image) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewImage interface {
	mock.TestingT
	Cleanup(func())
}

// NewImage creates a new instance of Image. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImage(t mockConstructorTestingTNewImage) *Image {
	mock := &Image{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
