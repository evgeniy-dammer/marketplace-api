// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockCache

import (
	context "github.com/evgeniy-dammer/marketplace-api/pkg/context"
	mock "github.com/stretchr/testify/mock"

	query "github.com/evgeniy-dammer/marketplace-api/pkg/query"

	queryparameter "github.com/evgeniy-dammer/marketplace-api/pkg/queryparameter"

	role "github.com/evgeniy-dammer/marketplace-api/internal/domain/role"

	user "github.com/evgeniy-dammer/marketplace-api/internal/domain/user"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// UserCreate provides a mock function with given fields: ctx, _a1
func (_m *User) UserCreate(ctx context.Context, _a1 user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserDelete provides a mock function with given fields: ctx, userID
func (_m *User) UserDelete(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGetAll provides a mock function with given fields: ctx, meta, params
func (_m *User) UserGetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]user.User, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]user.User, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []user.User); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetAllRoles provides a mock function with given fields: ctx, meta, params
func (_m *User) UserGetAllRoles(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter) ([]role.Role, error) {
	ret := _m.Called(ctx, meta, params)

	var r0 []role.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) ([]role.Role, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter) []role.Role); ok {
		r0 = rf(ctx, meta, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]role.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.MetaData, queryparameter.QueryParameter) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetOne provides a mock function with given fields: ctx, userID
func (_m *User) UserGetOne(ctx context.Context, userID string) (user.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInvalidate provides a mock function with given fields: ctx
func (_m *User) UserInvalidate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSetAll provides a mock function with given fields: ctx, meta, params, users
func (_m *User) UserSetAll(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter, users []user.User) error {
	ret := _m.Called(ctx, meta, params, users)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter, []user.User) error); ok {
		r0 = rf(ctx, meta, params, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSetAllRoles provides a mock function with given fields: ctx, meta, params, roles
func (_m *User) UserSetAllRoles(ctx context.Context, meta query.MetaData, params queryparameter.QueryParameter, roles []role.Role) error {
	ret := _m.Called(ctx, meta, params, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, query.MetaData, queryparameter.QueryParameter, []role.Role) error); ok {
		r0 = rf(ctx, meta, params, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUpdate provides a mock function with given fields: ctx, _a1
func (_m *User) UserUpdate(ctx context.Context, _a1 user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUser(t mockConstructorTestingTNewUser) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
